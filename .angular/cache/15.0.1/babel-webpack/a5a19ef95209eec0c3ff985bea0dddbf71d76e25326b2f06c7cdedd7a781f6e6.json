{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.baseUrl;\n  }\n  get usuario() {\n    return {\n      ...this._usuario\n    };\n  }\n  // SERVICIO REGISTER //////////////////\n  register(name, email, password) {\n    const url = `${this.baseUrl}/auth/new`;\n    const body = {\n      name,\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(tap(resp => {\n      if (resp.ok) {\n        localStorage.setItem('token', resp.token);\n      }\n    }), map(resp => resp.ok), catchError(err => of(err.error.msg)));\n  }\n  // FIN REGISTER ///////////\n  // SERVICIO LOGIN //////////////////\n  login(email, password) {\n    const url = `${this.baseUrl}/auth`;\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(tap(resp => {\n      if (resp.ok) {\n        localStorage.setItem('token', resp.token);\n      }\n    }), map(resp => resp.ok), catchError(err => of(err.error.msg)));\n  }\n  // FIN LOGIN /////////// \n  // METODO VALIDAR TOKEN\n  validarToken() {\n    const url = `${this.baseUrl}/auth/renew`;\n    const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n    return this.http.get(url, {\n      headers\n    }).pipe(map(resp => {\n      console.log(resp.token);\n      localStorage.setItem('token', resp.token);\n      this._usuario = {\n        name: resp.name,\n        uid: resp.uid,\n        email: resp.email\n      };\n      return resp.ok;\n    }), catchError(err => of(false)));\n  }\n  // FIN VALIDAR TOKEN\n  // LOGOUT\n  logout() {\n    localStorage.clear();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}